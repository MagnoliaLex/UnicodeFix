UnicodeFix - Program Summary
============================

Version 2 - Web Interface Update (2024-12-21)

Purpose:
UnicodeFix is a comprehensive Unicode text cleaning utility that normalizes problematic Unicode characters into clean ASCII equivalents. This version features both a modern web interface and command-line tools, addressing issues with invisible characters, typographic quotes, dashes, and other Unicode artifacts that can cause problems in code, configuration files, and document processing.

Main Components:

1. Web Interface (New - Primary Feature):
   - web_app.py: FastAPI application with modern responsive UI
   - run_web.py: Web application launcher with auto-browser opening
   - static/app.js: Frontend JavaScript with drag-and-drop and dark mode
   - unicodefix-web.bat: Windows web launcher
   - Start-UnicodeFix-Web.ps1: PowerShell web launcher with error handling
   - test_web.py: Component testing for web interface

2. Core Python Components:
   - bin/cleanup_text_module.py: Modular cleaning functions for web integration
   - bin/cleanup-text.py: Command-line interface implementation
   - Handles file processing, STDIN/STDOUT pipes, and batch operations
   - Uses Unidecode library for Unicode normalization
   - Supports Windows CRLF and Unix LF line endings

3. Platform-Specific Setup Scripts:
   - setup.sh: Unix/Linux/macOS setup with bash and virtual environment
   - setup.ps1: Windows PowerShell setup with automated configuration

4. Windows Integration:
   - unicodefix.bat: Command-line launcher (auto-generated)
   - bin/cleanup-text.bat: Windows batch wrapper
   - windows/setup-context-menu.ps1: Explorer context menu installer
   - windows/unicodefix-context-menu.reg: Manual registry template

5. macOS Integration:
   - macOS/Strip Unicode.shortcut: Finder Quick Action integration

6. Documentation:
   - README.md: Main documentation with web interface priority
   - README_Windows.md: Comprehensive Windows guide
   - CHANGELOG.md: Version history and feature updates
   - startup_instructions.txt: Comprehensive usage guide
   - cursor_changelog.txt: Development tracking

Dependencies:
Core:
- Python 3.8+ (required)
- Unidecode library (automatically installed)

Web Interface:
- FastAPI (modern web framework)
- Uvicorn (ASGI server)
- Python-multipart (file upload support)

Platform-Specific:
- PowerShell 5.0+ (Windows only)
- Bash shell (Unix/Linux/macOS only)

Web Interface Features:
- Modern, responsive UI with Apple-inspired design
- Dark/light mode with user preference persistence
- Drag-and-drop file upload with visual feedback
- Real-time text paste and cleaning
- Copy to clipboard and download functionality
- Cross-platform browser compatibility
- Keyboard shortcuts (Ctrl+Enter, Escape)
- Real-time statistics and change tracking
- Secure file upload with type validation

Capabilities:
- Modern web interface for non-technical users
- Cross-platform Unicode character normalization
- Batch file processing via command line
- STDIN/STDOUT pipe support
- GUI integration (Windows Explorer, macOS Finder)
- Virtual environment management
- Command-line aliases and functions
- Automatic line ending normalization
- Comprehensive error handling and user feedback
- RESTful API for integration with other tools

Target Platforms:
- Web browsers: Chrome, Firefox, Safari, Edge (modern versions)
- Windows 10/11 (PowerShell and web-based)
- macOS (bash-based with Shortcuts and web integration)
- Linux distributions (bash-based with web interface)

Use Cases:
- Web-based text cleaning for general users
- Cleaning AI-generated text with Unicode artifacts
- Processing configuration files with invisible characters
- Normalizing text from various sources and platforms
- Batch processing multiple files via command line
- Integration with text editors and IDEs
- API integration for automated workflows

API Endpoints:
- GET /: Main web interface
- POST /api/clean-text: Clean text from JSON request
- POST /api/clean-file: Clean uploaded file
- GET /health: Health check endpoint
- GET /docs: Auto-generated API documentation

Security Features:
- Input validation and path sanitization
- Prevention of directory traversal attacks
- Secure file upload with type restrictions
- Protection against command injection
- CORS configuration for web security
- Safe parameter handling across all interfaces 